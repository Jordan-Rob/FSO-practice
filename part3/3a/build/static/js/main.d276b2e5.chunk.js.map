{"version":3,"sources":["components/Note.js","services/notes.js","services/login.js","components/Notification.js","serviceWorker.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","token","getAll","axios","get","create","newObject","a","config","headers","Authorization","post","response","data","update","id","put","setToken","newToken","login","credentials","Notification","message","Boolean","window","location","hostname","match","then","console","log","promise2","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","username","setUsername","password","setPassword","user","setUser","useEffect","noteService","loggedInUserJSON","localStorage","getItem","JSON","parse","notesToShow","filter","addNote","event","preventDefault","date","Date","Math","random","concat","handleNoteChange","target","value","handleLogin","loginService","setItem","stringify","setTimeout","onSubmit","type","name","onChange","map","i","key","find","changedNote","catch","error","n","toggleImportanceOf","ReactDOM","render","StrictMode","val","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d276b2e5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n    const label = note.important? 'make not important' : 'make important'\r\n\r\n    return(\r\n        <li className='note'>{note.content} <button onClick={toggleImportance}>{label}</button></li>\r\n    )\r\n}\r\n\r\nexport default Note;","import axios from 'axios';\r\n\r\nconst baseUrl = '/api/notes'\r\n\r\nlet token = null\r\n\r\nconst setToken = (newToken) => {\r\n    token = `bearer ${newToken}`\r\n}\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl)\r\n}\r\n\r\nconst create = async (newObject) => {\r\n    const config = {\r\n        headers: { Authorization: token }\r\n    }\r\n\r\n    const response = await axios.post(baseUrl, newObject, config)\r\n    return response.data\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    create,\r\n    update,\r\n    setToken\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async (credentials) => {\r\n    const response = await axios.post(baseUrl, credentials)\r\n    return response.data \r\n}\r\n\r\nexport default { login }","import React from 'react';\r\n\r\nconst Notification = ({message}) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='error'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport Note from './components/Note';\nimport noteService from './services/notes'\nimport loginService from './services/login'\nimport Notification from './components/Notification'\nimport * as serviceWorker from './serviceWorker';\nimport './index.css'\n\n\n//const Display = ({counter}) => <div><p>{counter}</p></div>\n  \n\n//const Button = ({handleClick, text}) =><div><button onClick={handleClick}>{text}</button></div>\n\n\n\n// 1. SIMPLE STATE IMPLEMENTATION\n/*\nconst App = () => {\n\n  const [ counter, setCounter ] = useState(0)\n\n  const increase = () => {\n    setCounter(counter + 1)\n  }\n\n  const decrease = () => {\n    setCounter(counter - 1)\n  }\n\n  return (\n    <div>\n      < Button handleClick = {increase} text = 'Increase' />\n      < Display counter={counter} />\n      < Button handleClick = {decrease} text = 'Decrease' />\n      \n    </div>\n  )\n\n}\n*/\n\n\n// 2. COMPLEX STATE IMPLEMENTATION  first iteration\nconst Display = ({counter}) => <div><p> {counter} </p></div>\nconst Button = ({handleClick, text}) => <div><button onClick={handleClick} >{text}</button></div>\n\n/*\nconst App = () => {\n\n  //********HigherOrder functions practice********\n  const kids = [\n    {name:'jason', age:13, allowance:2300},\n    {name:'Mary', age:13, allowance:3400},\n    {name:'Son', age:17, allowance:10500},\n    {name:'Kris', age:14, allowance:5300},\n    {name:'Kelly', age:17, allowance:9900},\n    {name:'Mason', age:15, allowance:6400},\n    {name:'Jenny', age:11, allowance:3500},\n  ]\n  \n  const is13 = (kids)=> kids.age === 13\n  \n  const thirteen = kids.filter(is13)\n  const namesonly = kids.map((kid)=> kid.name) \n  const ageOnly = kids.map((kid)=>kid.age)\n  console.log(namesonly)\n  console.log(ageOnly)\n\n  const allowancesSum = kids.reduce((sum, kid) => {\n    return sum + kid.allowance\n  }, 0)\n\n  console.log(allowancesSum)\n\n  //*********END OF HIGHER ORDER FUNCS PRACTICE*********\n  \n  //first \n  /* \n  const [ left, setLeft] = useState(0)\n  const [right, setRight] = useState(0)\n  */\n\n  //second\n  /*\n  const [click, setClick] = useState({ left:0, right:0})\n\n\n  const leftClick = () => {\n    const newClick = {\n      left: click.left + 1,\n      right: click.right\n    }\n    setClick(newClick)\n\n  }\n  \n  const rightClick = () => {\n    const newClick = {\n      left: click.left,\n      right: click.right + 1\n    }\n    setClick(newClick)\n  }\n  */\n\n  //third , object spread\n\n  /*\n  const [click, setClick] = useState({ left:0, right:0})\n\n  const leftClick = () => {\n    const newClick = {\n      ...click,  //object spread\n      left: click.left + 1\n    }\n    setClick(newClick)\n  }\n\n  const rightClick = () => {\n    const newClick = {\n      ...click,   //object spread\n      right: click.right + 1\n    }\n    setClick(newClick)\n  }\n */\n  //fourth, handling Arrays\n  /*\n  const [click, setClick] = useState({ left:0, right:0})\n  const [allClicks, setAll] = useState([])\n\n  const leftClick = () => {\n    const newClick = {\n      ...click,  //object spread\n      left: click.left + 1\n    }\n    setClick(newClick)\n    setAll(allClicks.concat('L'))\n  }\n\n  const rightClick = () => {\n    const newClick = {\n      ...click,   //object spread\n      right: click.right + 1\n    }\n    setClick(newClick)\n    setAll(allClicks.concat('R'))\n  }\n\n  //History component Conditional Rendering\n\n  const History = (props) =>{\n    if (props.allClicks.length === 0){\n      return(\n        <div>\n          <p>the app is used by pressing the buttons</p>\n        </div>\n      )\n    }\n\n    return(\n      <div>\n        button press history: {props.allClicks.join('')}\n      </div>\n    )\n  }\n\n\n  return (\n    <div>\n      <Display counter={click.left} />\n      <Button handleClick={leftClick} text='left' />\n      <Button handleClick={rightClick} text='right' />\n      <Display counter={click.right} />\n      <History allClicks={allClicks} />\n    </div>\n  )\n\n}\n*/\n\n\nconst promise = axios.get('http://localhost:3001/notes')\npromise.then(response => console.log(response.data))\n\nconst promise2 = axios.get('http://localhost:3001/foobar')\nconsole.log(promise2)\n\n/************Part2 Forms***************/\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n  // part 5 additions\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n\n  useEffect( () => {\n    console.log('Effect')\n    noteService\n            .getAll()\n            .then( response => {\n            console.log('promise fulfilled')\n            setNotes(response.data)\n          })\n    }, [])\n\n  \n  useEffect( () => {\n    const loggedInUserJSON = window.localStorage.getItem('loggedInUser')\n    if (loggedInUserJSON) {\n      const user = JSON.parse(loggedInUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }, [])\n  \n  const notesToShow = showAll ? notes:notes.filter(note => note.important === true)\n  \n  const addNote = (event) => {\n    event.preventDefault()\n    const newObject = {\n      content:newNote,\n      date: new Date(),\n      important: Math.random() < 0.5,\n    }\n\n    noteService\n      .create(newObject)\n      .then( response => {\n        setNotes(notes.concat(response.data))\n        setNewNote('')\n      })\n    //setNotes(notes.concat(newObject))\n    //setNewNote('')\n\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find( note => note.id === id)\n    const changedNote = { ...note, important: !note.important}\n\n    noteService\n      .update(id, changedNote)\n      .then( response => {\n        setNotes(notes.map( note => note.id !== id? note:response.data))\n      })\n      .catch( error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server `\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n          setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const handleNoteChange = (event) =>{\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    //console.log('logging in with', username, password)\n\n    try {\n      const user = await loginService.login({\n        username, password\n      })\n      window.localStorage.setItem(\n        'loggedInUser', JSON.stringify(user)\n      ) \n      noteService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n\n    } catch (error) {\n      setErrorMessage('Wrong Credentials')\n      setTimeout( () => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const loginForm = () => (\n    <form onSubmit = { handleLogin }>\n      <div>\n        username\n        <input\n          type=\"text\"\n          value={username}\n          name=\"Username\"\n          onChange={({ target }) => setUsername(target.value)}\n        />\n      </div>\n      <div>\n        password\n        <input\n          type=\"password\"\n          value={password}\n          name=\"Password\"\n          onChange={({ target }) => setPassword(target.value)}\n        />\n      </div>\n      <button type=\"submit\">login</button>\n    </form>\n  )\n\n  const noteForm = () => (\n    <form onSubmit = { addNote }>\n      <input value={newNote} onChange={handleNoteChange} />\n      <button type=\"submit\">save</button>\n    </form>  \n  )\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n\n      { /* user === null && loginForm() */}\n      { /*user !== null && note()*/ }\n\n      {\n        user === null?\n          loginForm():\n          <div>\n            <p>{ user.name } is logged in</p>\n            { noteForm() }\n          </div> \n      }\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) => \n          <Note key={i} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />\n        )}\n      </ul>\n       \n    </div>\n  )\n}\n\n\nconst notes = [{id:0, val:'foo'}, {id:1, val:'foobar'}, {id:2, val:'barfoo'}]\n\nReactDOM.render(\n  <React.StrictMode>\n    <App  notes={ notes } />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}